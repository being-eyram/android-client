plugins {
    id "com.android.library"
    id "org.jetbrains.dokka"
    id "kotlin-android"
    id "maven-publish"
    id "signing"
}

def artifactId = "android-client"
def ossrhUsername = findProperty("OSSRH_USERNAME")
def ossrhPassword = findProperty("OSSRH_PASSWORD")
def signingKeyId = findProperty("SIGNING_KEY_ID")
def signingKey = findProperty("SIGNING_KEY")
def signingKeyPassphrase = findProperty("SIGNING_KEY_PASSPHRASE")

group = "com.speechly"
version = findProperty("LIBRARY_VERSION") ? findProperty("LIBRARY_VERSION")  : "1.0-SNAPSHOT"

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 30

        versionCode 1
        versionName version

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    tasks {
        dokkaGfm {
            outputDirectory = new File("${project.rootDir}/docs/")
            doLast {
                new File("${project.rootDir}/docs/client/index.md").renameTo("${project.rootDir}/docs/client/README.md")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        testOptions {
            unitTests.all {
                useJUnitPlatform()
            }
        }
    }

    sourceSets["main"].java.srcDir("src/main/kotlin")

    kotlinOptions {
        jvmTarget = "1.8"
    }

}

dependencies {
    implementation "com.speechly:api:0.5.0"

    implementation "io.grpc:grpc-okhttp:1.43.2"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "androidx.appcompat:appcompat:1.4.1"
    implementation "com.google.android.material:material:1.5.0"

    implementation "androidx.constraintlayout:constraintlayout:2.1.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "com.beust:klaxon:5.5"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.2"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.8.2"
    testImplementation "io.strikt:strikt-core:0.33.0"

    androidTestImplementation "com.android.support.test:runner:1.0.2"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:3.0.2"
    implementation "androidx.fragment:fragment-ktx:1.4.0"
    implementation "androidx.activity:activity-ktx:1.4.0"
}


println("Version to use")
println(version)

task javadoc(type: Javadoc) {
    doFirst {
        configurations.implementation
            .filter { it.name.endsWith(".aar") }
            .each { aar ->
                copy {
                    from zipTree(aar)
                    include "**/classes.jar"
                    into "$buildDir/tmp/aarsToJars/${aar.name.replace(".aar", "")}/"
                }
            }
    }

    configurations.implementation.setCanBeResolved(true)
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.implementation
    classpath += fileTree(dir: "$buildDir/tmp/aarsToJars/")
    destinationDir = file("${project.buildDir}/outputs/javadoc/")
    failOnError false
    exclude "**/BuildConfig.java"
    exclude "**/R.java"
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set("javadoc")
    from dokkaJavadoc.outputDirectory
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    if (project.plugins.findPlugin("com.android.library")) {
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId = group
                artifactId = artifactId
                version = version

                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    from components.java
                }

                artifact androidSourcesJar
                artifact javadocJar

                pom {
                    name = artifactId
                    description = "Speechly Android Client"
                    url = "https://github.com/speechly/android-client"
                    licenses {
                        license {
                            name = "MIT License"
                            url = "http://www.opensource.org/licenses/mit-license.php"
                        }
                    }
                    developers {
                        developer {
                            id = "speechly"
                            name = "Speechly"
                            email = "admin@speechly.com"
                        }
                    }
                    scm {
                        connection = "scm:git:git://github.com/speechly/android-client.git"
                        developerConnection = "scm:git:ssh://github.com/speechly/android-client.git"
                        url = "https://github.com/speechly/android-client"
                    }
                }
            }
        }
        repositories {
            maven {
                name = "sonatype"

                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots"
                url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(signingKeyId, signingKey, signingKeyPassphrase)
    sign publishing.publications
}
